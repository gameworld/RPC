// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/timeservice.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <ctime>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::fighter::time;

class timeserviceHandler : virtual public timeserviceIf {
 public:
  timeserviceHandler() {
    // Your initialization goes here
  }

  int64_t time() {
    // Your implementation goes here
    printf("time\n");
    return std::time(NULL);
  }

  void timeStr(std::string& _return) {
    // Your implementation goes here
    printf("timeStr\n");
    char buf[32];
   std:: string str;

   struct tm t;

    time_t now;
    std::time(&now);
    strftime(buf,sizeof(buf),"%Y-%m-%d %H:%M:%S",localtime_r(&now,&t));
    _return=buf;
  }

  WEEKDAY::type getWeekDay() {
    // Your implementation goes here
    printf("getWeekDay\n");
    time_t now;
    std::time(&now);
    struct tm t;
    localtime_r(&now,&t);
    return  WEEKDAY::type(t.tm_wday);
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<timeserviceHandler> handler(new timeserviceHandler());
  shared_ptr<TProcessor> processor(new timeserviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

